"""
AppletMessage model for agent communication
"""

from typing import Dict, Any, Optional
from pydantic import BaseModel, Field, validator

class AppletMessage(BaseModel):
    """
    Standard message format for communication between agents and the orchestrator.
    Includes content, context, and metadata.
    """
    
    content: str = Field(
        description="The primary content of the message, typically text generated by an agent"
    )
    
    context: Dict[str, Any] = Field(
        default_factory=dict,
        description="Contextual information including system prompts and execution context"
    )
    
    metadata: Dict[str, Any] = Field(
        default_factory=dict,
        description="Metadata about the message execution, including errors and metrics"
    )
    
    @validator('context')
    def validate_system_prompt(cls, context):
        """Ensure system_prompt is present in context for agent execution"""
        if 'system_prompt' not in context:
            context['system_prompt'] = ""
        return context
    
    def has_error(self) -> bool:
        """Check if the message contains an error flag in metadata"""
        return self.metadata.get('error', False)
    
    def get_error_details(self) -> Optional[Dict[str, Any]]:
        """Get detailed error information if present"""
        if not self.has_error():
            return None
        
        return {
            'error_type': self.metadata.get('error_type', 'unknown'),
            'error_message': self.metadata.get('error_message', ''),
            'details': self.metadata.get('error_details', {})
        }
    
    class Config:
        """Pydantic configuration"""
        json_schema_extra = {
            "example": {
                "content": "The analysis of the data shows a positive trend.",
                "context": {
                    "system_prompt": "You are an Analyzer agent. Analyze the provided data.",
                    "workflow_id": "wf-123",
                    "node_id": "node-456"
                },
                "metadata": {
                    "execution_time": 0.45,
                    "token_count": 128,
                    "model": "gpt-4.1"
                }
            }
        }
