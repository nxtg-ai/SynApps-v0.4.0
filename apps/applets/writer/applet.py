"""
WriterApplet - Text generation applet for SynApps

This applet uses gpt-4.1 to generate text based on a prompt or topic.
"""
import os
import json
import httpx
import logging
from typing import Dict, Any, Optional

# Import base applet from orchestrator
import sys
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..', 'orchestrator'))
from main import BaseApplet, AppletMessage
from utils import async_retry, RetryExhausted

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("writer-applet")

class WriterApplet(BaseApplet):
    """
    Writer Applet that generates text using gpt-4.1 or similar LLMs.
    
    Capabilities:
    - Text generation from prompts
    - Content creation
    - Summarization
    """
    
    VERSION = "0.1.0"
    CAPABILITIES = ["text-generation", "summarization", "content-creation"]
    
    def __init__(self):
        """Initialize the Writer Applet."""
        self.api_key = os.environ.get("OPENAI_API_KEY")
        if not self.api_key:
            logger.warning("No OpenAI API key found. Using mock responses.")
    
    async def on_message(self, message: AppletMessage) -> AppletMessage:
        """Process an incoming message and generate text."""
        logger.info("Writer Applet received message")
        
        # Extract content from message
        content = message.content
        context = message.context
        
        # Get the input text/prompt
        input_text = ""
        if isinstance(content, str):
            input_text = content
        elif isinstance(content, dict) and "prompt" in content:
            input_text = content["prompt"]
        elif isinstance(content, dict) and "text" in content:
            input_text = content["text"]
        else:
            input_text = "Please provide some information to work with."
        
        # Apply any context or system prompts
        system_prompt = "You are a helpful AI assistant that generates high-quality, creative text."
        if "system_prompt" in context:
            system_prompt = context["system_prompt"]
        
        # Call the LLM API (OpenAI for MVP)
        generated_text = await self._generate_text(input_text, system_prompt)
        
        # Return the generated text
        return AppletMessage(
            content=generated_text,
            context={**context},  # Preserve context
            metadata={"applet": "writer", "model": "gpt-4.1"}
        )
    
    async def _generate_text(self, prompt: str, system_prompt: str) -> str:
        """Generate text using OpenAI's gpt-4.1 API."""
        if not self.api_key:
            # Return mock response for testing
            return f"This is a mock response for: {prompt}. In the real app, this would be generated by gpt-4.1."
        
        try:
            # Call the API with retry mechanism
            result = await self._call_openai_api(prompt, system_prompt)
            return result
                
        except RetryExhausted as e:
            logger.error(f"All retry attempts failed for OpenAI API: {e}")
            return f"Error generating text after multiple attempts: {str(e)}"
        except Exception as e:
            logger.error(f"Unexpected error calling OpenAI API: {e}")
            return f"Error generating text: {str(e)}"
    
    @async_retry(
        max_retries=3,
        base_delay=1.0,
        max_delay=10.0,
        backoff_factor=2.0,
        jitter=True,
        retry_on_status_codes=[429, 500, 502, 503, 504],
        circuit_breaker_threshold=5,
        circuit_breaker_timeout=60.0,
    )
    async def _call_openai_api(self, prompt: str, system_prompt: str) -> str:
        """Call OpenAI API with retry mechanism."""
        async with httpx.AsyncClient(timeout=60.0) as client:
            response = await client.post(
                "https://api.openai.com/v1/chat/completions",
                headers={
                    "Authorization": f"Bearer {self.api_key}",
                    "Content-Type": "application/json"
                },
                json={
                    "model": "gpt-4.1",
                    "messages": [
                        {"role": "system", "content": system_prompt},
                        {"role": "user", "content": prompt}
                    ],
                    "temperature": 0.7,
                    "max_tokens": 1000
                }
            )
            
            if response.status_code != 200:
                logger.error(f"OpenAI API error: {response.text}")
                raise Exception(f"OpenAI API returned status code {response.status_code}: {response.text}")
            
            data = response.json()
            return data["choices"][0]["message"]["content"]

# For testing
if __name__ == "__main__":
    import asyncio
    
    async def test_writer():
        applet = WriterApplet()
        message = AppletMessage(
            content="Write a short poem about AI and creativity",
            context={},
            metadata={}
        )
        response = await applet.on_message(message)
        print(response.content)
    
    asyncio.run(test_writer())
